from typing import Any, Callable, Dict, List, Optional, Tuple, Type, Union, overload

from elmclient._app import _App as App
from elmclient._project import _Project as Project
from elmclient._rm import _Folder as Folder
from elmclient.server import JazzTeamServer
from elmclient import httpops
import requests

from .elmclient_types import ParamsType, RequestDataType, JSONType


import lxml.etree as ET

class _Project(oslcqueryapi._OSLCOperations_Mixin, _typesystem.Type_System_Mixin, httpops.HttpOperations_Mixin):
    app: App
    name: str
    is_optin: bool
    singlemode: bool
    supports_components: bool
    localconfig: Optional[str] # spx Todo
    project_uri: str
    local_config: Optional[str]
    global_config: Optional[str]
    accept_language: Optional[str]
    headers: Dict[str, Any]
    component_project: Optional[Project]
    _folders: Optional[Dict[str, Folder]]
    services_xml: Optional[ET.ElementTree]
    services_uri: Optional[str]
    appcatalog_xml: Optional[ET.ElementTree]
    hooks: List[Callable]
    configTree: Optional[Any]
    server: JazzTeamServer

    def __init__(self, name: str, project_uri: str, app: App, is_optin: bool = False, singlemode: bool = False, defaultinit: bool = True) -> None: ...
    def listmembers(self) -> None: ...
    def load_types(self) -> None: ...
    def _get_typeuri_rdf(self, uri: str) -> ET.ElementTree: ...
    def report_type_system(self) -> str: ...
    def get_services_xml(self, headers: Optional[Dict[str, str]] = None, force: bool = False) -> ET.ElementTree: ...
    def get_query_capability_uri(self, resource_type: Optional[str] = None, context: Optional[_Project] = None) -> str: ...
    def get_query_capability_uris(self, resource_type: Optional[str] = None, context: Optional[_Project] = None) -> Dict[str, str]: ...
    
    @overload
    def get_factory_uri(self, resource_type: Optional[str] = None, context: Optional[_Project] = None, return_shapes: bool = False) -> str: ...
    @overload
    def get_factory_uri(self, resource_type: Optional[str] = None, context: Optional[_Project] = None, return_shapes: bool = True) -> Tuple[str, List[str]]: ...
    def get_factory_uri(self, resource_type: Optional[str] = None, context: Optional[_Project] = None, return_shapes: bool = False) -> Union[str, Tuple[str, List[str]]]: ...
    
    def get_factory_uris(self, resource_type: Optional[str] = None, context: Optional[_Project] = None) -> Dict[str, str]: ...
    def load_type_from_resource_shape(self, el: Any) -> None: ...
    def _get_headers(self, headers: Optional[Dict[str, str]] = None) -> Dict[str, str]: ...
    def _get_request(self, verb: str, reluri: str = '', *, params: ParamsType = None, headers: Optional[Dict[str, str]] = None, data: RequestDataType = None) -> httpops.HttpRequest: ...
    @property
    def iid(self) -> str: ...
    def _get_oslc_headers(self, headers: Optional[Dict[str, str]] = None) -> Dict[str, str]: ...
    def reluri(self, reluri: str = ...) -> str: ...
    def find_config(self, name: str, nowarning: bool = ...) -> None: ...
    def _do_find_config_by_name(self, name_or_uri: str, nowarning: bool = False, allow_workspace: bool = True, allow_snapshot: bool = True, allow_changeset: False = ...) -> None: ...
    def get_gc_contributions(self, gcuri: str) -> JSONType: ...
    def get_our_contributions(self, gcuri: str) -> List[Tuple[str, str]]: ...
    def set_local_config(self, name_or_uri: Optional[str], global_config_uri: Optional[str] = None) -> None: ...
    def create_changeset(self, name: str) -> None: ...
    def discard_changeset(self) -> None: ...
    def deliver_changeset(self) -> None: ...
    def _load_types(self, force: bool = False) -> None: ...
    def resolve_shape_name_to_uri(self, name: str, exception_if_not_found: bool = True) -> Optional[str]: ...
    def resolve_property_name_to_uri(self, name: str, shapeuri: Optional[str] = None, exception_if_not_found: bool = True) -> Optional[str]: ...
    def resolve_enum_name_to_uri(self, name: str, propertyuri: Optional[str] = ..., exception_if_not_found: bool = ...) -> Optional[str]: ...
    def resolve_uri_to_name(self, uri: str, trytouseasid: bool = False) -> Optional[str]: ...
    def get_missing_uri_title(self, uri: str) -> str: ...
    def find_component(self, name_or_uri: str) -> None: ...
    def load_folder(self) -> None: ...
    def folder_nametouri_resolver(self, name_or_uri: str) -> None: ...
    def folder_uritoname_resolver(self, name_or_uri: str) -> None: ...
    def resolve_reqid_to_uri(self, reqid: str) -> None: ...
    def resolve_uri_to_reqid(self, requri: str) -> None: ...
    def initial_stream_name(self) -> str: ...
    def report_components_and_configurations(self) -> Dict[str, Any]: ...
    def user_nametouri_resolver(self, name: str, raiseifinvalid: bool = ...) -> Optional[str]: ...
    def user_uritoname_resolver(self, uri: str) -> str: ...
    def resolve_project_nametouri(self, name: str, raiseifinvalid: bool = ...) -> Optional[str]: ...
    def _generic_load_type_from_resource_shape(self, el: ET.Element, supershape: Optional[Any] = None) -> Optional[int]: ...