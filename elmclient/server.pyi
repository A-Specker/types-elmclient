from typing import Dict, List, Optional, Tuple
import cachecontrol.heuristics
import requests
from . import httpops as httpops, utils as utils
from . import _app
from _typeshed import Incomplete

CACHE_FOLDER: str = '.web_cache'
COOKIE_SAVE_FILE: str = ".cookies"
WEB_SAVE_FOLDER: str = "cache"
CACHEDAYS: int = 7
PROXY_PORT: int = 8888
proxydict: Optional[dict[str, str]] = None

class _AddDaysHeuristic(cachecontrol.heuristics.BaseHeuristic):
    days: int
    def __init__(self, days: int) -> None: ...
    def update_headers(self, response: requests.Response): ...
    def warning(self, response: requests.Response): ...

def caching_save_creds(cachingcontrol: int) -> bool: ...
def caching_save_data(cachingcontrol: int) -> bool: ...
def caching_wipe_cache(cachingcontrol: int) -> bool: ...
def setupproxy(url, proxyport=...) -> None: ...
def tcp_can_connect_to_url(host, port, timeout: int = 5) -> bool: ...

class JazzTeamServer(httpops.HttpOperations_Mixin):
    verifysslcerts: bool
    username: str
    password: str
    baseurl: str
    jts: Optional[str]
    auto_retry: bool
    cachingcontrol: int
    headers: Optional[Dict[str, str]]
    cachefolder: str
    apps: List[_app._App]
    alwayscache: bool 
    def __init__(self, serverhostport: str, user: str, password: str, jtsappstring: Optional[str] = 'jts', verifysslcerts: bool = True, appstring: Optional[str] = None, cachingcontrol: int = 0, cachefolder: str = ..., alwayscache: bool = False) -> None: ...
    def get_csrf(self) -> int: ...
    def get_user_password(self, url: str=None) -> Tuple(str, str):  ...
    def find_app(self, appstring: str, ok_to_create: bool = False) -> Optional[_app._App]: ...
    def add_app(self, appstring: str) -> _app._App: ...
    def reluri(self, reluri: str = '') -> str: ...
    @staticmethod
    def get_appstring_details(appstring: str) -> Tuple[str, str]: ...
    @staticmethod
    def clear_client_cache() -> None: ...
