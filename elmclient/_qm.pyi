import argparse
from typing import Any, Dict, List, Optional, Tuple, Type, Union
import lxml.etree as ET

from elmclient import resource
from elmclient import _project
from elmclient import _qmrestapi
from elmclient import _app

class BuildDefinitionResource(resource.Resource): ...
class BuildRecordResource(resource.Resource): ...
class KeywordResource(resource.Resource): ...
class TestDataResource(resource.Resource): ...
class TestPhaseResource(resource.Resource): ...
class TestSuiteResource(resource.Resource): ...
class TestSuiteExecutionRecordResource(resource.Resource): ...
class TestSuiteResultResource(resource.Resource): ...
class TestCaseResource(resource.Resource): ...
class TestExecutionRecordResource(resource.Resource): ...
class TestPlanResource(resource.Resource): ...
class TestResultResource(resource.Resource): ...
class TestScriptResource(resource.Resource): ...

valuetypetoresource: Dict[str, Type[resource.Resource]]

class QMProject(_project._Project, _qmrestapi.QM_REST_API_Mixin, resource.Resources_Mixin):
    _components: Optional[Dict[str, Any]]
    _configurations: Optional[Dict[str, Any]]
    _folders: Optional[Any]
    _foldersnotyetloaded: Optional[Any]
    is_singlemode: bool
    gcconfiguri: Optional[str]
    default_query_resource: str
    _confs_to_load: List[Any]
    unmodifiables: List[str]

    def __init__(self, name: str, project_uri: str, app: _app.App, is_optin: bool = False, singlemode: bool = False, defaultinit: bool = True) -> None: ...
    def load_components_and_configurations(self, force: bool = False) -> Optional[Tuple[int, int]]: ...
    def get_local_config(self, name_or_uri: str, global_config_uri: Optional[str] = None) -> Optional[str]: ...
    def load_configs(self) -> None: ...
    def list_configs(self) -> List[str]: ...
    def _load_types(self, force: bool = False) -> None: ...
    def _load_type_from_resource_shape(self, el: Any, supershape: Optional[Any] = ...) -> Optional[int]: ...
    def get_local_component_details(self) -> Dict[str, str]: ...
    def find_local_component(self, name_or_uri: str) -> Optional[QMComponent]: ...
    def list_components(self) -> List[str]: ...
    def _create_component_api(self, component_prj_url: str, component_name: str) -> "QMComponent": ...
    def is_type_uri(self, uri: str) -> bool: ...
    def app_resolve_uri_to_name(self, uri: str) -> Optional[str]: ... # TODO!
    def type_name_from_uri(self, uri: str) -> str: ...
    def is_resource_uri(self, uri: str) -> bool: ...
    def resource_id_from_uri(self, uri: str) -> Optional[str]: ...
    def is_folder_uri(self, uri: str) -> bool: ...
    def folder_nametouri_resolver(self, path_or_uri: str) -> str: ...
    def folder_uritoname_resolver(self, uri: str) -> str: ...
    def _do_find_config_by_name(self, name_or_uri: str, nowarning: bool = False, include_workspace: bool = True, include_snapshot: bool = True, include_changeset: bool = True) -> Optional[str]: ...
    def get_default_stream_name(self) -> str: ...
    def resourcetypediscriminator(self, resource_x: Any) -> resource.Resource: ...
    def queryResourcesByIDs(self, identifiers: Union[str, List[str]], *, querytype: Optional[str] = None, filterFunction: Optional[Any] = None, modifiedBefore: Optional[Any] = None, modifiedAfter: Optional[Any] = None, createdAfter: Optional[Any] = ...) -> List[Any]: ...

class QMComponent(QMProject):
    component_project: QMProject
    def __init__(self, name: str, project_uri: str, app: _app._App, is_optin: bool = False, singlemode: bool = False, defaultinit: bool = True, project: QMProject = None) -> None: ...

@utils.mixinomatic
class QMApp(_app._App, oslcqueryapi._OSLCOperations_Mixin, _typesystem.Type_System_Mixin):
    domain: str = 'qm'
    project_class: Type[QMProject]
    supports_configs: bool = True
    supports_components: bool = True
    supports_reportable_rest: bool = True
    reportable_rest_status: str
    reportablerestbase: str
    artifactformats: List[str]
    identifier_name: str
    identifier_uri: str

    rootservices_xml: ET.ElementTree
    serviceproviders: str
    default_query_resource: str
    version: Optional[str]
    majorversion: Optional[str]

    def __init__(self, server: Any, contextroot: str, jts: Optional[Any] = ...) -> None: ...
    def _get_headers(self, headers: Optional[Dict[str, str]] = ...) -> Dict[str, str]: ...
    def _load_projects(self, include_archived: bool = False, force: bool = False) -> None: ...
    def load_types(self, force: bool = False) -> None: ...
    def _load_types(self, force: bool = ...) -> None: ...
    def resolve_uri_to_name(self, uri: str, prefer_same_as: bool = True, dontpreferhttprdfrui: bool = True) -> Optional[str]: ...
    @classmethod
    def add_represt_arguments(cls, subparsers: argparse._SubParsersAction, common_args: argparse.ArgumentParser) -> None: ...
    def process_represt_arguments(self, args: argparse.ArgumentParser, allapps: Any) -> Tuple[str, Dict[str, Any], Dict[str, str]]: ...